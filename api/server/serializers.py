"""
Serializers for the server app.
"""

from rest_framework import serializers

from .models import Site


class SiteSerializer(serializers.ModelSerializer):
    """
    Serializer for Site model with full CRUD support.
    - identifier is read-only (auto-generated)
    - owner is set automatically to the authenticated user
    - Only exposes name and identifier fields
    """

    class Meta:
        model = Site
        fields = ["id", "name", "identifier", "created_at", "updated_at"]
        read_only_fields = ["id", "identifier", "created_at", "updated_at"]

    def validate(self, attrs):
        """
        Validate that the user hasn't exceeded the site limit.
        """
        request = self.context.get("request")
        if request and hasattr(request, "account"):
            # For create operations, check site limit
            if self.instance is None:  # This is a create operation
                from .models import Site

                site_count = Site.objects.filter(owner=request.account).count()
                if site_count >= 50:
                    raise serializers.ValidationError("Site limit reached. Maximum 50 sites allowed.")
        return attrs

    def create(self, validated_data):
        """
        Create a new site with the authenticated user as owner.
        """
        request = self.context.get("request")
        if request and hasattr(request, "user"):
            # This will be implemented when we add authentication
            # For now, we'll create without an owner
            pass

        # The identifier will be auto-generated by the model's save method
        return super().create(validated_data)
